<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="fluid.introduction"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Introduction</title>

  <para>Fluid is a next-generation templating engine which was engineered with
  several goals in mind:<itemizedlist>
      <listitem>
        <para>Simplicity</para>
      </listitem>

      <listitem>
        <para>Flexibility</para>
      </listitem>

      <listitem>
        <para>Extensibility</para>
      </listitem>

      <listitem>
        <para>Ease of use</para>
      </listitem>
    </itemizedlist></para>

  <para>This templating engine should not be bloated, instead, we try to do it
  "The Zen Way" - you do not need to learn too many things, thus you can
  concentrate on getting your things done, while the template engine handles
  everything you do not want to care about.</para>

  <section xml:id="fluid.introduction.whatdoesitdo">
    <title>What does it do?</title>

    <para>In many MVC systems, the view currently does not have a lot of
    functionality. The standard view usually provides a
    <methodname>render</methodname> method, and nothing more. That makes it
    cumbersome to write powerful views, as most designers will not write PHP
    code.</para>

    <para>That is where the Template Engine comes into play: It "lives" inside
    the View, and is controlled by a special
    <classname>TemplateView</classname> which instanciates the Template
    Parser, resolves the template HTML file, and renders the template
    afterwards.</para>

    <section>
      <title>Example</title>

      <para>Below, you'll find a snippet of a real-world template displaying a
      list of blog postings. Use it to check whether you find the template
      language intuitive (we hope you will ;-) )</para>

      <example>
        <title>Basic Fluid Example</title>

        <programlisting>{namespace f=TYPO3\Fluid\ViewHelpers}<co
            xml:id="intro.example.0"/>
&lt;html&gt;
&lt;head&gt;&lt;title&gt;Blog&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Blog Postings&lt;/h1&gt;
&lt;f:for each="{postings}" as="posting"&gt;<co xml:id="intro.example.1"/>
  &lt;h2&gt;{posting.title}&lt;/h2&gt;
  &lt;div class="author"&gt;{posting.author.name} {posting.author.email}&lt;/div&gt;<co
            xml:id="intro.example.2"/>
  &lt;p&gt;&lt;f:link.action action="details" arguments="{id : posting.id}"&gt;{posting.teaser}&lt;/f:link.action&gt;&lt;/p&gt;<co
            xml:id="intro.example.3"/>
&lt;/f:for&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>

        <calloutlist>
          <callout arearefs="intro.example.0">
            <para>The <emphasis>Namespace Import</emphasis> makes the
            <classname>TYPO3\Fluid\ViewHelper</classname> namespace available
            under the shorthand <code>f</code>. This is important for View
            Helpers, like the <code>&lt;f:link.action /&gt;</code> tag.</para>
          </callout>

          <callout arearefs="intro.example.1">
            <para>This essentially corresponds to <code>foreach($postings as
            $posting)</code> in PHP.</para>
          </callout>

          <callout arearefs="intro.example.2">
            <para>With the dot-notation (<code>{posting.title}</code>, or
            <code>{posting.author.name}</code>), you can traverse objects. In
            the latter example, the system calls
            <code>$posting-&gt;getAuthor()-&gt;getName()</code>.</para>
          </callout>

          <callout arearefs="intro.example.3">
            <para>The
            <code>&lt;f:link.action&gt;...&lt;/f:link.action&gt;</code> tag is
            a so-called <emphasis>ViewHelper</emphasis>. It calls arbitary PHP
            code, and in this case renders a link to the
            "details"-Action.</para>
          </callout>
        </calloutlist>
      </example>

      <para>There is a lot more to show, including:<itemizedlist>
          <listitem>
            <para>Layouts</para>
          </listitem>

          <listitem>
            <para>Custom View Helpers</para>
          </listitem>

          <listitem>
            <para>Boolean expression syntax</para>
          </listitem>
        </itemizedlist></para>

      <para>We invite you to explore Fluid some more, and please do not
      hesitate to give feedback!</para>
    </section>
  </section>
</chapter>
